/*******************************************************************************
 * Model *
 *   
 ******************************************************************************/

// Define a JSON object for storing model info (app data). 
var m = {};


/*******************************************************************************
* Components *
******************************************************************************/

// Define a JSON object for storing UI components.
var c = {};

// Define a control panel for user input.
c.controlPanel = ui.Panel();

// Define the main interactive map.
c.map = ui.Map();

////Logo

// var logo = ee.Image('users/ns_boise/BoiseStateLogo2wgs')
// .visualize({
//     bands:  ['b1', 'b2', 'b3'],
//     min: 0,
//     max: 255
//     });
// var thumb = ui.Thumbnail({
//     image: logo,
//     params: {
//         dimensions: '1000x500',
//         format: 'jpeg'
//         },
//     style: {height: '150px', width: '350px',padding :'5'}
//     });
    
// var toolPanel = ui.Panel(thumb, 'flow', {width: '400px'});


var emptyRast = ee.Image().byte(); // <-- create empty raster for painting

var studyArea = ee.FeatureCollection('users/ns_boise/US_Sagebrush_Biome_2019')
var paintStudyarea = emptyRast.paint(studyArea, '000000', 1);
c.map.addLayer(paintStudyarea, {palette: '000000'},'Sagebrush Biome Area')
c.map.centerObject(studyArea,5)

// Define an app info widget group.
c.info = {};
c.info.titleLabel = ui.Label('Mesic Vegetation Persistence (MVP) App. (Beta Version 1.0)', {fontWeight: 'bold'});
c.info.aboutLabel = ui.Label(
  ' The application provides near-real time spatial and temporal dynamics of mesic vegetation using time-series Sentinel-2 and Landsat-[5,7,8] images.' +
  ' It uses combination of moisture and vegetation-based indices to threshold and differentiate mesic vegetation. ' +
  ' The Mesic Persistence map represents spatio-temporal dynamics while scatter plot provides' +
  ' variation of mesic vegetaion on user drawn area of interest. The dropdown menu [activates after running application] at the center of map ' + 
  ' provides list of avialable NAIP images.');
   
c.info.guide =   ui.Label('User guide').setUrl(
  'https://docs.google.com/document/d/1NCEuSc3YPvZRVwOPSUGDsGNAGVfmhHz84Yi3Xl9GMwg/edit?usp=sharing') 
c.info.vid =   ui.Label('Video tutorial').setUrl(
  'https://drive.google.com/file/d/19t8DheO3Vw1kWQR-ShYyV5FXIbQSDAdP/view?usp=share_link') 
c.info.contact =   ui.Label('For more infromation, contact the author: nawarajshrestha@boisestate.edu')

  
c.info.panel = ui.Panel([ c.info.titleLabel, c.info.aboutLabel, c.info.guide, c.info.vid,c.info.contact ]);
// Define drawing tools 
var symbol = {
  polygon: 'ðŸ”º',
  rectangle: 'â¬›',

};

c.buttons = ui.Panel({
  widgets: [
    ui.Button({
      label: symbol.polygon + ' Polygon',
      onClick: drawPolygon,
      style: {stretch: 'horizontal'}
    }),
    
    ui.Button({
      label: symbol.rectangle + ' Rectangle',
      onClick: drawRectangle,
      style: {stretch: 'horizontal'}
    }),
  ],
  style: {position: 'bottom-left'},
  layout: null,
});


// SET UP SECONDARY PANELS
// Sensor dropdown
var sensorLabel = ui.Label('1. Select Sensor',{fontWeight: 'bold'});
var sensorList = ['Sentinel-2','Landsat'];
var sensorSelect = ui.Select({items:sensorList, value:'Sentinel-2', style:{stretch: 'horizontal'}});
c.sensorPanel = ui.Panel([sensorLabel,sensorSelect], null, {stretch: 'horizontal'});


// years panel
var d = new Date();
var y = d.getFullYear();

var yearSectionLabel = ui.Label('2. Define Year Range ',{fontWeight: 'bold'});
var aboutSensorLabel = ui.Label('Select Year Range between 2017-Current for Sentinel-2',{fontWeight: 'bold',fontFamily: 'serif', textDecoration: 'underline'});
var startYearLabel = ui.Label('Start Year');
var startYearslider = ui.Slider({min:1984, max:y, value:2017, step:1});
startYearslider.style().set('stretch', 'horizontal');

var endYearLabel = ui.Label('End Year');
var endYearslider = ui.Slider({min:1984, max:y, value:y-1, step:1});
endYearslider.style().set('stretch', 'horizontal');

c.yearsPanel = ui.Panel([
    yearSectionLabel,aboutSensorLabel,
    ui.Panel([startYearLabel, startYearslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'}), //
    ui.Panel([endYearLabel  , endYearslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'})
  ]);

// date panel
var dateSectionLabel = ui.Label('3. Define Date Range (month-day)',{fontWeight: 'bold'});

var startDayLabel = ui.Label('Start Date:');
var startDayBox = ui.Textbox({value:'05-01'});
startDayBox.style().set('stretch', 'horizontal');

var endDayLabel = ui.Label('End Date:');
var endDayBox = ui.Textbox({value:'10-31'});
endDayBox.style().set('stretch', 'horizontal');

c.datesPanel = ui.Panel([dateSectionLabel,
    ui.Panel(
      [startDayLabel, startDayBox, endDayLabel, endDayBox],
      ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'}
    )]);

// //Index threshold panel

var thresholdLabel = ui.Label('4. Define Threshold',{fontWeight: 'bold'});
var MCARILabel = ui.Label('MCARI');
var MCARIslider = ui.Slider({min:0, max:1, value:0.2, step:0.01});
MCARIslider.style().set('stretch', 'horizontal');


var mesicVSDILabel = ui.Label('MCI');
var VSDIslider = ui.Slider({min:0, max:1, value:0.4, step:0.1});
VSDIslider.style().set('stretch', 'horizontal');

c.thresholdPanel = ui.Panel(
  [
    thresholdLabel,
    ui.Panel([MCARILabel, MCARIslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'}), //
    ui.Panel([mesicVSDILabel  , VSDIslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'})
  ] 
);

// Sensor dropdown
var timeSeriesLabel = ui.Label('5. Use time series viewer to find the appropriate threshold values',{fontWeight: 'bold'});

// var sensorSelect = ui.Select({items:sensorList, value:'Sentinel-2', style:{stretch: 'horizontal'}});
// var timeSeriesLabel = ui.Panel([timeSeriesLabel,timeSeriesLabel], null, {stretch: 'horizontal'});

var tsViewerLink =   ui.Label('Time Series Viewer').setUrl('https://ns-boise.users.earthengine.app/view/timeseriesplot') 

c.tsViewerPanel = ui.Panel([timeSeriesLabel, tsViewerLink], null, {stretch: 'horizontal'});

// Define an example location selector widget group.
c.info.titleFeature = ui.Label('6. Draw Area of Interest',{fontWeight: 'bold'});
c.info.titleFeature.style().set('stretch', 'horizontal');
c.featurePanel = ui.Panel([c.info.titleFeature]);


// submit panel
var submitButton = ui.Button({label: '7. Submit'});
c.submitButton = ui.Panel([submitButton], null, {stretch: 'horizontal'});
// c.chartPanel = ui.Panel({style: {position: 'bottom-right'}})

var chartPanel = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'bottom-right', shown: false}
});

//Color Pallette
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '200x15',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 22px'},
  });
}

function makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {
  var  labelheader = ui.Label('Mesic Persistence (%)',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});
  var labelLines = ui.Panel(
      [
        ui.Label(lowLine, {margin: '-4px 21px'}),
        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highLine, {margin: '-4px 21px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
      var labelPanel = ui.Panel(
      [
        ui.Label(lowText, {margin: '0px 14.5px'}),
        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highText, {margin: '0px 1px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
    return ui.Panel({
      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], 
      style: {position:'bottom-left'}});
}


/*******************************************************************************
* Composition *
******************************************************************************/
// c.controlPanel.add(toolPanel);
c.controlPanel.add(c.info.panel);

c.controlPanel.add(c.sensorPanel);
c.controlPanel.add(c.yearsPanel);
c.controlPanel.add(c.datesPanel);
c.controlPanel.add(c.thresholdPanel);
c.controlPanel.add(c.tsViewerPanel);

c.controlPanel.add(c.featurePanel);
c.controlPanel.add(c.buttons);
c.controlPanel.add(c.submitButton);
// c.controlPanel.add(chartPanel);
c.controlPanel.add(makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue']));

// c.map.clear()
ui.root.clear();

ui.root.add(c.controlPanel);
c.map.add(chartPanel);
ui.root.add(c.map);
// c.map.add(ui.Panel([c.info.panel, c.sensorPanel, c.yearsPanel,c.datesPanel,  c.featurePanel, c.buttons, c.submitButton,
//                     makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue'])],
//           ui.Panel.Layout.flow('vertical'), 
//           {width: '370px', position: 'bottom-left'}
//           ));
// c.map.add(c.chartPanel);

// // /*******************************************************************************
// * Styling *
// * 
// // ******************************************************************************/
c.controlPanel.style().set({
  width: '400px',
  padding: '0px'
});

c.map.setOptions('HYBRID');

/*******************************************************************************
* Behaviors *
******************************************************************************/

var drawingTools = c.map.drawingTools();

drawingTools.setShown(false);

while (drawingTools.layers().length() > 0) {
  var features = drawingTools.layers().get(0);
  drawingTools.layers().ee.FeatureCollection(features);
   print(featColl)
} 

while (drawingTools.layers().length() > 0) {
  var layer = drawingTools.layers().get(0);
  drawingTools.layers().remove(layer);
}

var symbol = {color: 'black', fillColor: '#FFFFFF77'}

var dummyGeometry =
    ui.Map.GeometryLayer({geometries: null});
drawingTools.layers().add(dummyGeometry);




function clearGeometry() {
  var layers = drawingTools.layers();
  layers.get(0).geometries().remove(layers.get(0).geometries().get(0));
}

function drawRectangle() {
  clearGeometry();
  drawingTools.setShape('rectangle');
  drawingTools.draw();
}

function drawPolygon() {
  drawingTools.setShape('polygon');
  drawingTools.draw();
  clearGeometry();
}



function calcFrequency(collection){
  var min_occurence = 5;
  var mesics_sum_vsdi = collection.select('mesics_MVsdi').reduce(ee.Reducer.sum());
  var mesics_frequency_vsdi = mesics_sum_vsdi.divide(collection.select('mesics_MVsdi').size()).multiply(100);
  var mesics_frequency_masked_vsdi = mesics_frequency_vsdi.updateMask(mesics_frequency_vsdi.gt(min_occurence)).rename('mesics_frequency_masked_vsdi');
  return ee.Image(mesics_frequency_masked_vsdi)
}

//// Function to calculate mmean ppt////
function meanPpt(img, aoi){
  var mPpt = img.reduceRegion(ee.Reducer.mean(), 
              aoi,4000,null,null,false,1e13)
              .get('ppt')
  var date = ee.Date(img.get('system:time_start'));
    return img.set({'meanPpt': mPpt, 'date': date});
    
}

// //// Function to calculate mmean ppt////
// function meanSpei(img, aoi){
//   var mSpei = img.reduceRegion(ee.Reducer.mean(), 
//               aoi,4000,null,null,false,1e13)
//               .get('spei14d')
//   var date = ee.Date(img.get('system:time_start'));
//     return img.set({'meanSpei': mSpei, 'date': date});
    
// }
/* 
Scripts to process images
*/

var process_images = require('users/nawa_shrestha/MesicVegetation:processMesicDate.js'); 
var process_LSimages = require('users/nawa_shrestha/MesicVegetation:processMesicLandsat.js'); 
var process_util = require('users/nawa_shrestha/MesicVegetation:Utilities.js'); 

function chartTimeSeries() {
  // Make the chart panel visible the first time a geometry is drawn.
  if (!chartPanel.style().get('shown')) {
    chartPanel.style().set('shown', true);
  }
  drawingTools.setShape(null);
  
  var aoi = drawingTools.layers().get(0).geometries().get('0');
  var vecDisplay = ee.Image(0).updateMask(0).paint(aoi, '000000', 2);
  // Get the drawn geometry; it will define the reduction region.
  // var aoi = drawingTools.layers().get(0).getEeObject();
  var geom = drawingTools.layers().get(0).toGeometry();
  c.map.centerObject(geom, 14);
  
  var startYear = startYearslider.getValue();
  var endYear = endYearslider.getValue();
  var startMonth = startDayBox.getValue();
  var endMonth = endDayBox.getValue();
  var sensor = sensorSelect.getValue();
  var mcari = parseFloat(MCARIslider.getValue())
  var mci = parseFloat(VSDIslider.getValue())
  //// Landform to calculate valley bottom////
  // var landforms = ee.Image('CSP/ERGo/1_0/US/landforms').select('constant').clip(geom);
  // var lfmask = landforms.eq(24).or(landforms.eq(34)).or(landforms.eq(41)).or(landforms.eq(42));
  // var valleyBottom = landforms.updateMask(lfmask).reduceToVectors({maxPixels: 1e13, scale: 30, geometryType: 'polygon',});
  
  var datasetPpt = ee.ImageCollection("OREGONSTATE/PRISM/AN81d")
                  .filterDate(startYear+'-'+startMonth, endYear+'-'+endMonth)
                  .filterBounds(aoi)
                  .select('ppt');

  
  if(sensor == 'Sentinel-2'){
    var processed = process_images.processS2(startYear, endYear, startMonth, endMonth, geom, mcari, mci);
    var frequency = calcFrequency(processed);
    // var mesic_areas = processed.map(mesicAreas)
    var meanppt = datasetPpt.map(meanPpt);
    var mesic_areas = processed.map(function(i, geom) {
      var mesic = ee.Image(1).mask(i.select('mesics_MVsdi'));
      var mesicsArea =mesic.multiply(ee.Image.pixelArea())
                    .reduceRegion(ee.Reducer.sum(),aoi,10,null,null,false,1e13)
                    .get('constant');
      var geomArea = ee.Image(1).multiply(ee.Image.pixelArea()) 
                      .reduceRegion(ee.Reducer.sum(),aoi,10,null,null,false,1e13)
                      .get('constant');
      var areaVSDI = ee.Number(mesicsArea).divide(ee.Number(geomArea));
      
      return i.set({'areaVSDI': areaVSDI.multiply(100)
      
    })});
    
    // var merged = meanppt.merge(mesic_areas);
    var chartArea = ui.Chart.feature.byFeature(mesic_areas, 'system:time_start', 'areaVSDI')
              // .setOptions(titleMsf);
              .setOptions({
                title: 'Percent Mesic Area',
                hAxis: {title: 'Date'},
                vAxis: {title: 'Area %'},
                lineWidth: 0,
                pointsVisible: true,
                pointSize: 2,
              })
    
    // var chartArea = ui.Chart.feature.byFeature({features: merged, xProperty: 'system:time_start', yProperties: ['areaVSDI']})
    //         .setSeriesNames(['Mesic Area'])
    //         .setChartType('ColumnChart')
    //         .setOptions({
    //           title: 'Mesic area (%) and Precipitation in Area of Interest (Sentinel-2)',
    //           series: {
    //             0: {targetAxisIndex: 1, type: 'bar', color: '1d6b99'},
    //             1: {targetAxisIndex: 0, type: 'line', lineWidth: 0, pointSize: 2, color: 'e37d05'}},
    //           hAxis:
    //               {title: 'Date', titleTextStyle: {italic: false, bold: true}},
    //           vAxes: {
    //             0: {title: 'Mesic Area (%)', baseline: 0,
    //               titleTextStyle: {italic: false, bold: true, color: 'e37d05'}
    //             },
    //             1: {
    //               title: 'Precipitation (mm)',
    //               titleTextStyle: {italic: false, bold: true, color: '1d6b99'}},
    //           },
    //           bar: {groupWidth: '40%'},
    //         });
    
  } if(sensor == 'Landsat') {
    var processedLS = process_LSimages.processL578(startYear, endYear, startMonth, endMonth,point);
    var frequency = calcFrequency(processedLS);
    var mesic_areasLS = processedLS.map(function(i, geom) {
      var mesic = ee.Image(1).mask(i.select('mesics_MVsdi'));
      var mesicsArea =mesic.multiply(ee.Image.pixelArea())
                    .reduceRegion(ee.Reducer.sum(), aoi,10,null,null,false,1e13)
                    .get('constant');
      var geomArea = ee.Image(1).multiply(ee.Image.pixelArea()) 
                    .reduceRegion(ee.Reducer.sum(), aoi,10,null,null,false,1e13)
                    .get('constant');
      var areaVSDI = ee.Number(mesicsArea).divide(ee.Number(geomArea));
      var date = ee.Date(i.get('system:time_start'));
      return i.set({'areaVSDI': areaVSDI.multiply(100), 'date': date})
      
    });
   
    var chartArea = ui.Chart.feature.byFeature(mesic_areasLS, 'date', 'areaVSDI')
              // .setOptions(titleMsf);
              .setOptions({
                title: 'Percent Mesic Area Landsat (User Drawn)',
                hAxis: {title: 'Date'},
                vAxis: {title: 'Area %'},
                lineWidth: 0,
                pointsVisible: true,
                pointSize: 2,
              })
  }

  c.map.layers().reset();
  c.map.layers().set(0, ui.Map.Layer(frequency, 
                  {min:5,max:100,palette:['orange','yellow','lightblue','darkblue']},
                  'Mesic Vegetation Persistence'));
  c.map.layers().set(1, ui.Map.Layer(vecDisplay, {palette: '000000'},'AOI'));
  
  // Replace the existing chart in the chart panel with the new chart.
  chartPanel.widgets().set(0, chartArea)
  drawingTools.setShape(null);
  dummyGeometry.setShown(false)
}

// var selectorlabel = ui.Label('Select NAIP')
// var selector = ui.Select()
// var selectorpanel = ui.Panel({items: dates, 
  
// })
// /* 
// function to draw NAIP images
// */

// var naipImages = function(){
//   var aoi = drawingTools.layers().get(0).getEeObject();
//   var naip_im = process_util.findNAIP(aoi);
  
//   function renderDateRange(date) {
//     var image = naip_im.filterDate(ee.Date(date), ee.Date(date).advance(1, 'day'))
//     var trueColorVis = {
//       min: 0.0,
//       max: 255.0,
//       bands: ['R', 'G', 'B']};

//     var layer = ui.Map.Layer(image, trueColorVis, 'NAIP')
    
//     c.map.layers().set(2, layer);
    
    
//   }
  
//   var allDates = ee.List(naip_im.aggregate_array('system:time_start'));
//   var allDatesFormatted = allDates.map(function(date){
//         return ee.Date(date).format('YYYY-MM-dd')}).distinct();
    
//   allDatesFormatted.evaluate(renderSlider) 
//   function renderSlider(dates) {
//     var selector = ui.Select({
//       items: dates, 
//       placeholder: 'Select NAIP Image',
//       // value: dates[0], 
//       onChange: renderDateRange,
//       });
//       var selectorpanel = ui.Panel([selector])
//   // ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'})
//   // selectorpanel.style().set({position: 'top-right'});
//       // selectorpanel.clear()
//       c.map.remove(selectorpanel)
//       c.map.add(selectorpanel);
  
  
//   }
  
  

// }
// submitButton.onClick(ui.util.debounce(naipImages, 500));
submitButton.onClick(ui.util.debounce(chartTimeSeries, 500));
// selectorpanel.onChange(naipImages)



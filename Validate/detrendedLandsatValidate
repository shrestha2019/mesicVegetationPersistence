
// Applies scaling factors.
function applyScaleFactors(image) { 
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  // var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              // .addBands(thermalBands, null, true);
}


exports.applyScaleFactors = applyScaleFactors; 

/* 
Cloud mask Sentinel 2 images  
*/

// MASKING CLOUDS
function maskL457sr(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Unused
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  //var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  //var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image
      .updateMask(qaMask)
      .updateMask(saturationMask);
}

exports.maskL457sr = maskL457sr; 



function etm2oliSR(image){
  /* Function to transform Landsat ETM+ SR values to OLI values
  using OLS regressions found in Roy et al 2016
  'Characterization of Landsat-7 to Landsat-8 reflective wavelength
  and normalized difference vegetation index continuity' RSE
  */
  
  //blue (~0.48um)
  var blue = image.expression('0.0003 + 0.8474 * B1', {
    'B1': image.select('SR_B1')});
  
   //green (~0.56um)
  var green = image.expression('0.0088 + 0.8483 * B2', {
    'B2': image.select('SR_B2')});
    
  //red (~0.66um)
  var red = image.expression('0.0061 + 0.9047 * B3', {
    'B3': image.select('SR_B3')});
  
  //nir (~0.85um)
  var nir = image.expression('0.0412 + 0.8462 * B4', {
    'B4': image.select('SR_B4')});
    
  //swir1 (~1.61um)
  var swir1 = image.expression('0.0254 + 0.8937 * B5', {
    'B5': image.select('SR_B5')});
  
  //swir2 (~2.21um)
  var swir2 = image.expression('0.0172 + 0.9071 * B7', {
    'B7': image.select('SR_B7')});
  
  //var bands = ee.List([blue, green, red, nir, swir1, swir2]);
  var bands = [blue, green, red, nir, swir1, swir2];
  
  // List of current band names
  var cur_names =  image.bandNames();
  
  // List of names of bands to be added
  var new_names = ee.List(['b', 'g', 'r','nir',  'swir1', 'swir2']);
  
  // flatten list to make one large list rather than list within the list
  var names = cur_names.add(new_names).flatten();
  
  return image.addBands(bands).rename(names);}

var processL578 = function(poi) {
  var LSbands=['b', 'g', 'r','nir',  'swir1', 'swir2']
  var imgsLS5 = ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
        .filterBounds(poi)
        .filter(ee.Filter.calendarRange(5,10,"month"))
        .filter(ee.Filter.calendarRange(2009, 2011, "year"))
        .filter(ee.Filter.lte('CLOUD_COVER', 20))
        .map(applyScaleFactors)
  var imgsLS7 = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2")
        .filterBounds(poi)
        .filter(ee.Filter.calendarRange(5,10,"month"))
        .filter(ee.Filter.calendarRange(2009, 2014, "year"))
        .filter(ee.Filter.lte('CLOUD_COVER', 20))
        .map(applyScaleFactors)
  var imgsLS = imgsLS5.merge(imgsLS7)
  var imgsLS57 = imgsLS.map(maskL457sr)
  // Apply transformation 
  imgsLS57 = imgsLS57.map(etm2oliSR).map(function(img){
    return img.select(['SR_B1','SR_B2','SR_B3','SR_B4','SR_B5','SR_B7', 'QA_PIXEL'])
    .rename('b', 'g', 'r','nir',  'swir1', 'swir2', 'QA_PIXEL')
    
  })
  // Landsat8 for 2013 - 2016
  var imgsLS8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
        .filterBounds(poi)
        .filter(ee.Filter.calendarRange(5,10,"month"))
        .filter(ee.Filter.calendarRange(2013, 2022, "year"))
        .filter(ee.Filter.lte('CLOUD_COVER', 20))
        .map(applyScaleFactors)

//select and rename the bands to match images from 5 and 7
  imgsLS8 = imgsLS8.map(function(img){
  return img.select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7', 'QA_PIXEL'])
          .rename('b', 'g', 'r','nir',  'swir1', 'swir2', 'QA_PIXEL')
})

// SR cloud AND cloud shadow mask
  var add_FmaskLS8 = function(image) {
    var msk = image.select('QA_PIXEL');
    msk = msk
    //Cloud
    .neq(21826).and(msk.neq(21890)).and(msk.neq(22080)).and(msk.neq(22144)).and(msk.neq(22280))
    //Shadow
    .and(msk.neq(23888)).and(msk.neq(23952)).and(msk.neq(24088)).and(msk.neq(24216)).and(msk.neq(24344)).and(msk.neq(24472))
    //Cirrus
    .and(msk.neq(54596)).and(msk.neq(54852)).and(msk.neq(55052))
    // Cirrus shadow
    .and(msk.neq(56856)).and(msk.neq(56984)).and(msk.neq(57240))
  return image.mask(msk);
    
  };

//Apply cloud mask
  var imgsLS8 = imgsLS8.map(add_FmaskLS8)

//Merge w 5 and 7
  var imgsLS578 = imgsLS57.merge(imgsLS8)
  // var imgsLS578F = imgsLS578.filterDate(startYear+'-'+startMonth, endYear+'-'+endMonth)
  // var imgsLS578M = imgsLS578.map(maskLandform)//Mask image collection by landform/valley bottom
  
  // var L578colIndices = imgsLS578.map(calc_indices)
  // var detrendedL578 = detrend(L578colIndices)
  // var L578coldiff =  calc_moist_vsdi(detrendedL578)    
  // var classifyL578 =  L578coldiff.map(classify)
  // var mesic_area = Classify.map(mesic_area)
  return imgsLS578
}

var processL578 = processL578(poi)

////////////
var visParams = {
  bands: ['nir', 'r', 'g'],
  min: 0,
  max: 0.8,
  gamma: 1.4,
};


/* 
prints number of images  
*/
print(processL578, 'processL578')
Map.addLayer(processL578.median(),visParams, 'processL578')

// // // // //........................................................................///////

/* 
Calculate indices 
*/
var calc_indices = function(image){
    var date = ee.Date(image.get('system:time_start'));
    // var date = image.date();
    var years = date.difference(ee.Date('1970-01-01'), 'year');
    var NDVI = image.normalizedDifference(['nir', 'r']).float().rename('NDVI')

    var MCARI2 = image.expression(
      '(1.5 * (2.5 * (N - R) - 1.3 * (N - G))) / ((((2.0 * N + 1) ** 2) - (6.0 * N - 5 * (R ** 0.5)) - 0.5) ** 0.5)',
      {
      'N': image.select('nir'),
      'R': image.select('r'),
      'G': image.select('g')
    }).rename('MCARI2');//Modified Chlorophyll Absorption in Reflectance Index 2
    
    var VSDI = image.expression(
      '1-(((SWIR2)-Blue) + (Red -Blue))',
      // '1-((NIR-SWIR) + (NIR-Red))',
      {
      'SWIR': image.select('swir1'), 
      'Blue': image.select('b'), 
      'Red': image.select('r'), 
      'NIR': image.select('nir'), 
      'SWIR2': image.select('swir2'), 
      }).rename('VSDI')

  return image
    .addBands(ee.Image.constant(1))
    .addBands(ee.Image(years).rename('t')).float()
    .addBands(ee.Image(MCARI2))
    .addBands(ee.Image(VSDI))
    .addBands(ee.Image(NDVI))

};

var l578coll = processL578.map(calc_indices);
print (l578coll, 'l578coll')
// // // Map.addLayer(s2coll.median(),visualization, 'Median_s2')
// // // Map.addLayer(s2coll.select('MCARI2').median(),{}, 'MCARI2')
// // // Map.addLayer(s2coll.select('VSDI').median(),{min:0.5, max:1.02}, 'VSDI')


// Linear Modelling of time - Lots of interesting analyses can be done to time series by harnessing the linearRegression() reducer
//--------------------------
// Estimate linear trend over time.


// Use the model to "detrend" the original NDVI time series:
// Compute a de-trended series.
var detrended = l578coll.map(function(image) {
  var independents = ee.List(['constant', 't']);
  var dependent = ee.String('VSDI');
  var trend = l578coll.select(independents.add(dependent))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  var coefficients = trend.select('coefficients')
    .arrayProject([0])
    .arrayFlatten([independents]);
  // var detrended = image.select(dependent).subtract(image.select(independents)
  //                 .multiply(coefficients).reduce('sum')).rename('detrended')
  // return image 
  //     ee.Image(image.addBands(detrended))
  //     .copyProperties(image, ['system:time_start']);
  
  return ee.Image(image.addBands(image.select(dependent).subtract(
          image.select(independents).multiply(coefficients).reduce('sum'))
          .rename(dependent)))
          .copyProperties(image, ['system:time_start']);
});

// // print(detrended, "detrended")

// // Map.addLayer(detrended.select('VSDI_1').median(),{min:0, max:0.08}, 'DeMedian_s2')
// // Map.addLayer(detrended.select('VSDI').median(),{min:0.2, max:1.14}, 'Median_s2')



/* 
Calculate relative moisture (wetness of surface) using percentiles
*/


var Rmoisture = detrended.map(function(image) {
    var per = detrended.reduce(ee.Reducer.percentile([2, 5, 10, 90, 95, 98]))

    var moist_VSDI = image.expression(
          '(VSDI_1 - VSDI_1_p5) /(VSDI_1_p95-VSDI_1_p5)', 
        {
          'VSDI_1': image.select('VSDI_1'),
          'VSDI_1_p5': per.select('VSDI_1_p5'),
          'VSDI_1_p95': per.select('VSDI_1_p95'),
  }).rename('moist_VSDI')

  return image
    .addBands(ee.Image(moist_VSDI))
});

// // print(Rmoisture)
// // Map.addLayer(Rmoisture.select('moist_VSDI').median(),{}, 'moist_VSDI')
// // Map.addLayer(Rmoisture.select('Changes_NDVI').median(),{}, 'Changes_NDVI')
// // // Map.addLayer(Rmoisture.select('moist_ndmi').median(),{}, 'moist_ndmi')
// // // Map.addLayer(Rmoisture.select('moist_NDMIm').median(),{}, 'moist_NDMIm')
// // Map.addLayer(Rmoisture.select('moist_NSDI2').median(),{}, 'moist_NSDI2')



/* 
Classify/threshold based on relative moisture and MCARI2
*/
var classify = Rmoisture.map(function(image) {
  
  var mesics_MVsdi = image.expression(
          '((MCARI2 > 0.25) && (moist_VSDI > 0.3)) ? 1' +
          ': 0',
          
        {
          'moist_VSDI': image.select('moist_VSDI'),
          'MCARI2': image.select('MCARI2'),
  
}).rename('mesics_MVsdi')

  var mesicsNDVI = image.expression(
          '(NDVI >0.3) ? 1' +
          // ":(NDMI > 0.4) ? 1" +
          ': 0',
          
        {
          'NDVI': image.select('NDVI'),
          
        }).rename('mesicsNDVI')
  // var mesics_masked = mesics.multiply(lfmask).rename('mesics_masked'); 

  return image
    .addBands(ee.Image(mesics_MVsdi))
    // .addBands(ee.Image(mesics_vsdiOnly))
    .addBands(ee.Image(mesicsNDVI))

});

print(classify,'classify')

// var naip = ee.Image('USDA/NAIP/DOQQ/m_4610823_sw_12_1_20090623')

var naip = ee.ImageCollection("USDA/NAIP/DOQQ")
            .filterBounds(poi)
var naip20190722 = ee.Image('USDA/NAIP/DOQQ/m_4610823_sw_12_1_20090623')
var naipGeometry=naip.first().geometry()
print(naip, 'naip')

var classList = classify.toList(classify.size())
var classified = ee.Image(classList.get(0))
print(classified, 'classified')
Map.addLayer(classified, visParams, 'Landsat')
var Lclassified20190831=classified.select('mesics_MVsdi').clip(naipGeometry)
var Lclassified20190831NDVI=classified.select('mesicsNDVI').clip(naipGeometry)

// Map.addLayer(naip.first(),{min:0, max:255,bands:['N', 'R', 'G']}, 'NAIP')
Map.addLayer(naip20190722,{min:0, max:255,bands:['N', 'R', 'G']}, 'NAIP')

Map.addLayer(Lclassified20190831, {}, "Classified")

Export.image.toAsset({
  image: Lclassified20190831,
  description: "S2classified20190831",
  assetId: "Clas_" + Lclassified20190831.getString('system:index').getInfo(),
  scale: 10,
  maxPixels: 2384757284442,
  region: Lclassified20190831.geometry()
});

Export.image.toAsset({
  image: Lclassified20190831NDVI,
  description: "Lclassified20190831NDVI",
  assetId: "Clas_" + Lclassified20190831NDVI.getString('system:index').getInfo(),
  scale: 10,
  maxPixels: 2384757284442,
  region: Lclassified20190831NDVI.geometry()
});


// // //Use a function to iterate through months and calculate average NDVI
// // var months = ee.List.sequence(5, 10);
// // // print("months",months);
// // var years = ee.List.sequence(2017, 2022);
// // // print("years",years);


// // // Map filtering and reducing across year-month combinations and convert to ImageCollection
// // var yrMo = ee.ImageCollection.fromImages(
// //   years.map(function (y) {
// //         return months.map(function (m) {
// //             return classify
// //               .filter(ee.Filter.calendarRange(y, y, 'year'))
// //               .filter(ee.Filter.calendarRange(m, m, 'month'))
// //               .mean()
// //               .set('year',y)
// //               .set('month',m);
// //               // ee.Date.parse('MMM.', set('month',m));
              
// //         });
// //     }).flatten());
// // print("yrMo",yrMo);



/* 
Calculate percentage of relative moisture relative moisture 
*/

var min_occurence = 5;
var mesics_sum = classify.select('mesicsNDVI').reduce(ee.Reducer.sum());
var mesics_frequency = mesics_sum.divide(classify.select('mesicsNDVI').size()).multiply(100);
var mesics_frequency_masked = mesics_frequency.updateMask(mesics_frequency.gt(min_occurence));

var mesics_sum_vsdi = classify.select('mesics_MVsdi').reduce(ee.Reducer.sum());
var mesics_frequency_vsdi = mesics_sum_vsdi.divide(classify.select('mesics_MVsdi').size()).multiply(100);
var mesics_frequency_masked_vsdi = mesics_frequency_vsdi.updateMask(mesics_frequency_vsdi.gt(min_occurence));



/* 
Calculate Mesic area
*/

// var mesic_area = function(image){
//     var image1 = ee.Image(1).mask(image.select('mesics_MVsdi'));
//     var date = ee.Date(image.get('system:time_start')).format('YYYY-MM-DD');
//     var area_pxa = image1.multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(),
//                     dickeyArea,10,null,null,false,1e13)
//                     .get('constant');
//     var area = ee.Number(area_pxa).divide(1e6);                 
//     return image.set({'area': area, 'date':date
//     });
// };

// var landform = ee.Image('CSP/ERGo/1_0/US/landforms').select('constant');
// // Restricting landforms to Upper Slope (flat) [24], Lower slope (flat) [34],
// // Valley bottom [41], and Valley bottom (narrow) [42]
// var lfmask = landform.clip(studyArea)
//       .eq(24)
//       .or(landform.eq(34)).or(landform.eq(41))
//       .or(landform.eq(42))
     
// var vb = landform.clip(studyArea).updateMask(lfmask).reduceToVectors({
//         maxPixels: 1e13,
//         scale: 30
//       })
      
// //function to extract % area of a given LC
// var get_area = function(img){
//     var mesic = ee.Image(1).mask(img.select('mesics_MVsdi'));
//     var mesicVSDI = mesic.multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(), vb,10,null,null,false,1e13)
//                     .get('constant');
//     var ndvi = ee.Image(1).mask(img.select('mesicsNDVI'));
//     var mesciNDVI = ndvi.multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(), vb,10,null,null,false,1e13)
//                     .get('constant');
//     //var area = ee.Number(area_pxa).divide(1e6);  
//     var imgArea = ee.Image(1).multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(), vb,10,null,null,false,1e13)
//                     .get('constant')
//     var areaVSDI = ee.Number(mesicVSDI).divide(ee.Number(imgArea));
//     var areaNDVI = ee.Number(mesciNDVI).divide(ee.Number(imgArea));   
    
//     return img.set({'areaVSDI': areaVSDI.multiply(100), 
//                     'areaNDVI': areaNDVI.multiply(100)
//     });
// };

// var area_collection = classify.map(get_area)


// var datasePpt = ee.ImageCollection("OREGONSTATE/PRISM/AN81d")
//                   .filter(ee.Filter.date('2017-01-01', '2022-12-30'))
//                   // .filterBounds(geometry)
//                   .select('ppt')
//                   .map(function(img){
//                     var meanPpt = img.reduceRegion(ee.Reducer.mean(), vb,4000,null,null,false,1e13)
//                     .get('ppt')
//                     var date = ee.Date(img.get('system:time_start'));
//                     return img.set({'meanPpt': meanPpt, 'date': date});
//                   })
// print(datasePpt, 'datasePpt')

// var datasePpt = ee.ImageCollection("OREGONSTATE/PRISM/AN81d")
//                   .filter(ee.Filter.date('2017-01-01', '2022-12-30'))
//                   .filterBounds(poi)
//                   .select('ppt')

// //function to extract % area of a given LC
// var getPpt = function(img){
//     var meanPpt = img.reduceRegion(ee.Reducer.mean(), vb,4000,null,null,false,1e13)
//           .get('ppt')
//     var date = ee.Date(img.get('system:time_start'));
//                     // .get('constant');
//     return img.set({'meanPpt': meanPpt, 'date': date
//     });
// };

// var ppt = datasePpt.map(getPpt);

// // print(area_collection,'area_collection')

// // print(ppt,'ppt')

// var merged = ppt.merge(area_collection)
// // print(merged, 'merged')

// /* 
// select/draw an area to plot graph of Mesic area
// */

// var title = {
//   title: 'Percent Mesic Area',
//   hAxis: {title: 'Date'},
//   vAxis: {title: 'Area (km2)'},
//   lineWidth: 0,
//   pointsVisible: true,
//   pointSize: 2,
// };

// print(ui.Chart.feature.byFeature(area_collection, 'system:time_start', 'areaVSDI')
//                       .setOptions({
//                         title: '% Mesic Area',
//                         hAxis: {title: 'Date'},
//                         vAxis: {title: 'Mesic Area (%)'},
//                         lineWidth: 0, 
//                         pointsVisible: true, 
//                         pointSize: 2}));

// print(ui.Chart.feature.byFeature(area_collection, 'system:time_start', 'areaNDVI')
//                       .setOptions({
//                         title: '% Mesic Area NDVI',
//                         hAxis: {title: 'Date'},
//                         vAxis: {title: 'Mesic Area (%)'},
//                         lineWidth: 0, 
//                         pointsVisible: true, 
//                         pointSize: 2}));
                        
// // print(ui.Chart.image.seriesByRegion({
// //                               imageCollection: yrMo.select('mesics_MVsdi'),
// //                               regions: vb,
// //                               reducer: ee.Reducer.mean(),
// //                               scale: 30,
// //                               xProperty: 'month',
// //                               seriesProperty: 'mesics_MVsdi'
// //                             }).setOptions({
// //                               title: 'change of Mesic Area NDVI',
// //                               hAxis: {title: 'Date'}, 
// //                               vAxis: {title: 'Area (%)'},
// //                               lineWidth: 1, 
// //                               pointsVisible: true, 
// //                               pointSize: 2}));
// // print(ui.Chart.feature.byFeature(ppt, 'date','meanPpt')
// //                       .setChartType('ColumnChart')
// //                       .setOptions({
// //                         title: 'Ppt of Mesic Area',
// //                         hAxis: {title: 'Date'},
// //                         vAxis: {title: 'Area (%)'},
// //                         lineWidth: 0, 
// //                         pointsVisible: true, 
// //                         pointSize: 2}));
// // Define the chart and print it to the console.
// var chart =
//     ui.Chart.feature
//         .byFeature({
//           features: merged,
//           xProperty: 'system:time_start',
//           yProperties: ['meanPpt', 'areaVSDI']
//         })
//         .setSeriesNames(['Precipitation', 'Mesic Area'])
//         .setChartType('ColumnChart')
//         .setOptions({
//           // title: 'Mesic area (%) and Precipitation (mm) )',
//           series: {
//             0: {targetAxisIndex: 1, type: 'bar', color: '1d6b99'},
//             1: {
//               targetAxisIndex: 0,
//               type: 'line',
//               lineWidth: 0,
//               pointSize: 2,
//               color: 'e37d05'
//             }
//           },
//           hAxis:
//               {title: 'Date', titleTextStyle: {italic: false, bold: true}},
//           vAxes: {
//             0: {
//               title: 'Mesic Area (%)',
//               baseline: 0,
//               titleTextStyle: {italic: false, bold: true, color: 'e37d05'}
//             },
//             1: {
//               title: 'Precipitation (mm)',
//               titleTextStyle: {italic: false, bold: true, color: '1d6b99'}
//             },
//           },
//           bar: {groupWidth: '40%'},
//         });
// print(chart);
// //Add color bar
// //base code adapted from: 
// //https://gis.stackexchange.com/questions/290713/adding-map-key-to-map-or-console-in-google-earth-engine
// //https://code.earthengine.google.com/9f890c110e98fa3391480543009c8028

function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '300x15',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 22px'},
  });
}
function makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {
  var  labelheader = ui.Label('Mesic Persistence (%)',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});
  var labelLines = ui.Panel(
      [
        ui.Label(lowLine, {margin: '-4px 21px'}),
        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highLine, {margin: '-4px 21px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
      var labelPanel = ui.Panel(
      [
        ui.Label(lowText, {margin: '0px 14.5px'}),
        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highText, {margin: '0px 1px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
    return ui.Panel({
      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], 
      style: {position:'bottom-left'}});
}
Map.add(makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue']));


// Map.addLayer(mesics_frequency_masked, {min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'% Mesic NDVI');


Map.addLayer(mesics_frequency_masked_vsdi,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'% Moist VSDI MCARI');

// Export.image.toDrive({
//   image: mesics_frequency_masked_vsdi,
//   // description: mesics_frequency_masked_vsdi,
//   folder:'gee',
//   scale: 10,
//   maxPixels: 1e13,
//   region: region
//   })


// // Display the county boundaries.
// var boundary = ee.Image().byte().paint({
//   featureCollection: EllisMay,
//   color: 1,
//   width: 2
// });
// Map.addLayer(boundary, {palette: ['000000','d23513']}, 'baughCreek');

// Map.addLayer(baughCreek,{}, 'baughCreek')

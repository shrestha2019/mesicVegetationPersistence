/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var poi = /* color: #d63000 */ee.Geometry.Point([-114.41821756499256, 43.19049053324061]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

  
// /* 
// Remove cloud using cloud mask 
// */

function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000)
              .copyProperties(image, image.propertyNames())
  ;
}

function maskWater(image) {
  var water = image.normalizedDifference(['B3', 'B11']).float().rename('MNDWI')
  // var water = image.select('SCL');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = water.gt(0.1)

  return image.updateMask(mask.not())
              // .copyProperties(image, image.propertyNames())
  ;
}

// //--------------------------------------------------------------------------------------------//
var sentinel2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')
                  .filterDate('2017-01-01', '2017-12-31')
                  .filterBounds(poi)
                  .filter(ee.Filter.calendarRange(5,10,'month'))
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  // .filter(ee.Filter.eq("MGRS_TILE", "13TBE"))
                  .map(maskS2clouds)
                // .map(maskWater)
                  // .map(maskLandform)

var visualization = {
  min: 0.0,
  max: 0.4,
  bands: ['B8', 'B4', 'B5'],
  Gamma:1.15,
};

/* 
prints number of images  
*/
print(sentinel2, 'sentinel2')
Map.addLayer(sentinel2.median(),visualization, 'sentinel2')

// // // //........................................................................///////

/* 
Calculate indices 
*/
var calc_indices = function(image){
    var date = ee.Date(image.get('system:time_start'));
    // var date = image.date();
    var years = date.difference(ee.Date('1970-01-01'), 'year');
    var NDVI = image.normalizedDifference(['B8', 'B4']).float().rename('NDVI')

    var MCARI2 = image.expression(
      '(1.5 * (2.5 * (N - R) - 1.3 * (N - G))) / ((((2.0 * N + 1) ** 2) - (6.0 * N - 5 * (R ** 0.5)) - 0.5) ** 0.5)',
      {
      'N': image.select('B8'),
      'R': image.select('B4'),
      'G': image.select('B3')
    }).rename('MCARI2');//Modified Chlorophyll Absorption in Reflectance Index 2
    
    var VSDI = image.expression(
      '1-(((SWIR2)-Blue) + (Red -Blue))',
      // '1-((NIR-SWIR) + (NIR-Red))',
      {
      'SWIR': image.select('B11'), 
      'Blue': image.select('B2'), 
      'Red': image.select('B4'), 
      'NIR': image.select('B8A'), 
      'SWIR2': image.select('B12'), 
      }).rename('VSDI')

  return image
    .addBands(ee.Image.constant(1))
    .addBands(ee.Image(years).rename('t')).float()
    .addBands(ee.Image(MCARI2))
    .addBands(ee.Image(VSDI))
    .addBands(ee.Image(NDVI))

};

var s2coll = sentinel2.map(calc_indices);

// // Map.addLayer(s2coll.median(),visualization, 'Median_s2')
// // Map.addLayer(s2coll.select('MCARI2').median(),{}, 'MCARI2')
// // Map.addLayer(s2coll.select('VSDI').median(),{min:0.5, max:1.02}, 'VSDI')


// Linear Modelling of time - Lots of interesting analyses can be done to time series by harnessing the linearRegression() reducer
//--------------------------
// Estimate linear trend over time.


// Use the model to "detrend" the original NDVI time series:
// Compute a de-trended series.
var detrended = s2coll.map(function(image) {
  var independents = ee.List(['constant', 't']);
  var dependent = ee.String('VSDI');
  var trend = s2coll.select(independents.add(dependent))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  var coefficients = trend.select('coefficients')
    .arrayProject([0])
    .arrayFlatten([independents]);
  // var detrended = image.select(dependent).subtract(image.select(independents)
  //                 .multiply(coefficients).reduce('sum')).rename('detrended')
  // return image 
  //     ee.Image(image.addBands(detrended))
  //     .copyProperties(image, ['system:time_start']);
  
  return ee.Image(image.addBands(image.select(dependent).subtract(
          image.select(independents).multiply(coefficients).reduce('sum'))
          .rename(dependent)))
          .copyProperties(image, ['system:time_start']);
});

// print(detrended, "detrended")

// Map.addLayer(detrended.select('VSDI_1').median(),{min:0, max:0.08}, 'DeMedian_s2')
// Map.addLayer(detrended.select('VSDI').median(),{min:0.2, max:1.14}, 'Median_s2')



/* 
Calculate relative moisture (wetness of surface) using percentiles
*/


var Rmoisture = detrended.map(function(image) {
    var per = detrended.reduce(ee.Reducer.percentile([2, 5, 10, 90, 95, 98]))

    var moist_VSDI = image.expression(
          '(VSDI_1 - VSDI_1_p5) /(VSDI_1_p95-VSDI_1_p5)', 
        {
          'VSDI_1': image.select('VSDI_1'),
          'VSDI_1_p5': per.select('VSDI_1_p5'),
          'VSDI_1_p95': per.select('VSDI_1_p95'),
  }).rename('moist_VSDI')

  return image
    .addBands(ee.Image(moist_VSDI))
});

print(Rmoisture, 'Rmoisture')
// Map.addLayer(Rmoisture.select('moist_VSDI').median(),{}, 'moist_VSDI')
// Map.addLayer(Rmoisture.select('Changes_NDVI').median(),{}, 'Changes_NDVI')
// // Map.addLayer(Rmoisture.select('moist_ndmi').median(),{}, 'moist_ndmi')
// // Map.addLayer(Rmoisture.select('moist_NDMIm').median(),{}, 'moist_NDMIm')
// Map.addLayer(Rmoisture.select('moist_NSDI2').median(),{}, 'moist_NSDI2')



/* 
Classify/threshold based on relative moisture and MCARI2
*/
var classify = Rmoisture.map(function(image) {
  
  var mesics_MVsdi = image.expression(
          '((MCARI2 > 0.2 ) && (moist_VSDI > 0.3)) ? 1' +
          ': 0',
          
        {
          'moist_VSDI': image.select('moist_VSDI'),
          'MCARI2': image.select('MCARI2'),
  
}).rename('mesics_MVsdi')

  var mesics_vsdiOnly = image.expression(
          '(moist_VSDI >0.5) ? 1' +
          // ":(NDMI > 0.4) ? 1" +
          ': 0',
          
        {
          'moist_VSDI': image.select('moist_VSDI'),
          'MCARI2': image.select('MCARI2'),
          'NDMI': image.select('NDMI'),
  
}).rename('mesics_vsdiOnly')

  var mesicsNDVI = image.expression(
          '(NDVI >0.3) ? 1' +
          // ":(NDMI > 0.4) ? 1" +
          ': 0',
          
        {
          'NDVI': image.select('NDVI'),
          
        }).rename('mesicsNDVI')
  // var mesics_masked = mesics.multiply(lfmask).rename('mesics_masked'); 

  return image
    .addBands(ee.Image(mesics_MVsdi))
    .addBands(ee.Image(mesics_vsdiOnly))
    .addBands(ee.Image(mesicsNDVI))

});

print(classify,'classify')

// var naip = ee.ImageCollection("USDA/NAIP/DOQQ")
//             .filterBounds(poi)
// // var naip20190722 = ee.Image('USDA/NAIP/DOQQ/m_4610719_sw_13_060_20190722')
// var naipGeometry=naip.first().geometry()

// var classList = classify.toList(classify.size())
// var classified = ee.Image(classList.get(46))
// print(classified, 'classified')
// Map.addLayer(classified, visualization, 'Sentinel')
// var S2classified20170724=classified.select('mesics_MVsdi').clip(naipGeometry)

// Map.addLayer(naip.first(),{min:0, max:255,bands:['N', 'R', 'G']}, 'NAIP')

// Map.addLayer(S2classified20170724, {}, "Classified")

// Export.image.toAsset({
//   image: S2classified20170724,
//   description: "S2classified20190722",
//   assetId: "Classified" + S2classified20170724.getString('system:index').getInfo(),
//   scale: 10,
//   maxPixels: 2384757284442,
//   region: S2classified20170724.geometry()
// });




// //Use a function to iterate through months and calculate average NDVI
// var months = ee.List.sequence(5, 10);
// // print("months",months);
// var years = ee.List.sequence(2017, 2022);
// // print("years",years);


// // Map filtering and reducing across year-month combinations and convert to ImageCollection
// var yrMo = ee.ImageCollection.fromImages(
//   years.map(function (y) {
//         return months.map(function (m) {
//             return classify
//               .filter(ee.Filter.calendarRange(y, y, 'year'))
//               .filter(ee.Filter.calendarRange(m, m, 'month'))
//               .mean()
//               .set('year',y)
//               .set('month',m);
//               // ee.Date.parse('MMM.', set('month',m));
              
//         });
//     }).flatten());
// print("yrMo",yrMo);



/* 
Calculate percentage of relative moisture relative moisture 
*/

var min_occurence = 5;
var mesics_sum = classify.select('mesicsNDVI').reduce(ee.Reducer.sum());
var mesics_frequency = mesics_sum.divide(classify.select('mesicsNDVI').size()).multiply(100);
var mesics_frequency_masked = mesics_frequency.updateMask(mesics_frequency.gt(min_occurence));

var mesics_sum_vsdi = classify.select('mesics_MVsdi').reduce(ee.Reducer.sum());
var mesics_frequency_vsdi = mesics_sum_vsdi.divide(classify.select('mesics_MVsdi').size()).multiply(100);
var mesics_frequency_masked_vsdi = mesics_frequency_vsdi.updateMask(mesics_frequency_vsdi.gt(min_occurence));

var sentinel = sentinel2.median()
// Export.image.toDrive({
//   image: sentinel,
//   description: "sentinel",
//   // assetId: "Classified" + S2classified20170724.getString('system:index').getInfo(),
//   scale: 10,
//   folder: 'MapsPub',
//   maxPixels: 1e13,
//   region: geometry
// });


/* 
Calculate Mesic area
*/

// var mesic_area = function(image){
//     var image1 = ee.Image(1).mask(image.select('mesics_MVsdi'));
//     var date = ee.Date(image.get('system:time_start')).format('YYYY-MM-DD');
//     var area_pxa = image1.multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(),
//                     dickeyArea,10,null,null,false,1e13)
//                     .get('constant');
//     var area = ee.Number(area_pxa).divide(1e6);                 
//     return image.set({'area': area, 'date':date
//     });
// };

// var landform = ee.Image('CSP/ERGo/1_0/US/landforms').select('constant');
// // Restricting landforms to Upper Slope (flat) [24], Lower slope (flat) [34],
// // Valley bottom [41], and Valley bottom (narrow) [42]
// var lfmask = landform.clip(studyArea)
//       .eq(24)
//       .or(landform.eq(34)).or(landform.eq(41))
//       .or(landform.eq(42))
     
// var vb = landform.clip(studyArea).updateMask(lfmask).reduceToVectors({
//         maxPixels: 1e13,
//         scale: 30
//       })
      
// //function to extract % area of a given LC
// var get_area = function(img){
//     var mesic = ee.Image(1).mask(img.select('mesics_MVsdi'));
//     var mesicVSDI = mesic.multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(), vb,10,null,null,false,1e13)
//                     .get('constant');
//     var ndvi = ee.Image(1).mask(img.select('mesicsNDVI'));
//     var mesciNDVI = ndvi.multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(), vb,10,null,null,false,1e13)
//                     .get('constant');
//     //var area = ee.Number(area_pxa).divide(1e6);  
//     var imgArea = ee.Image(1).multiply(ee.Image.pixelArea()) 
//                     .reduceRegion(ee.Reducer.sum(), vb,10,null,null,false,1e13)
//                     .get('constant')
//     var areaVSDI = ee.Number(mesicVSDI).divide(ee.Number(imgArea));
//     var areaNDVI = ee.Number(mesciNDVI).divide(ee.Number(imgArea));   
    
//     return img.set({'areaVSDI': areaVSDI.multiply(100), 
//                     'areaNDVI': areaNDVI.multiply(100)
//     });
// };

// var area_collection = classify.map(get_area)


// var datasePpt = ee.ImageCollection("OREGONSTATE/PRISM/AN81d")
//                   .filter(ee.Filter.date('2017-01-01', '2022-12-30'))
//                   // .filterBounds(geometry)
//                   .select('ppt')
//                   .map(function(img){
//                     var meanPpt = img.reduceRegion(ee.Reducer.mean(), vb,4000,null,null,false,1e13)
//                     .get('ppt')
//                     var date = ee.Date(img.get('system:time_start'));
//                     return img.set({'meanPpt': meanPpt, 'date': date});
//                   })
// print(datasePpt, 'datasePpt')

// var datasePpt = ee.ImageCollection("OREGONSTATE/PRISM/AN81d")
//                   .filter(ee.Filter.date('2017-01-01', '2022-12-30'))
//                   .filterBounds(poi)
//                   .select('ppt')

// //function to extract % area of a given LC
// var getPpt = function(img){
//     var meanPpt = img.reduceRegion(ee.Reducer.mean(), vb,4000,null,null,false,1e13)
//           .get('ppt')
//     var date = ee.Date(img.get('system:time_start'));
//                     // .get('constant');
//     return img.set({'meanPpt': meanPpt, 'date': date
//     });
// };

// var ppt = datasePpt.map(getPpt);

// // print(area_collection,'area_collection')

// // print(ppt,'ppt')

// var merged = ppt.merge(area_collection)
// // print(merged, 'merged')

// /* 
// select/draw an area to plot graph of Mesic area
// */

// var title = {
//   title: 'Percent Mesic Area',
//   hAxis: {title: 'Date'},
//   vAxis: {title: 'Area (km2)'},
//   lineWidth: 0,
//   pointsVisible: true,
//   pointSize: 2,
// };

// print(ui.Chart.feature.byFeature(area_collection, 'system:time_start', 'areaVSDI')
//                       .setOptions({
//                         title: '% Mesic Area',
//                         hAxis: {title: 'Date'},
//                         vAxis: {title: 'Mesic Area (%)'},
//                         lineWidth: 0, 
//                         pointsVisible: true, 
//                         pointSize: 2}));

// print(ui.Chart.feature.byFeature(area_collection, 'system:time_start', 'areaNDVI')
//                       .setOptions({
//                         title: '% Mesic Area NDVI',
//                         hAxis: {title: 'Date'},
//                         vAxis: {title: 'Mesic Area (%)'},
//                         lineWidth: 0, 
//                         pointsVisible: true, 
//                         pointSize: 2}));
                        
// // print(ui.Chart.image.seriesByRegion({
// //                               imageCollection: yrMo.select('mesics_MVsdi'),
// //                               regions: vb,
// //                               reducer: ee.Reducer.mean(),
// //                               scale: 30,
// //                               xProperty: 'month',
// //                               seriesProperty: 'mesics_MVsdi'
// //                             }).setOptions({
// //                               title: 'change of Mesic Area NDVI',
// //                               hAxis: {title: 'Date'}, 
// //                               vAxis: {title: 'Area (%)'},
// //                               lineWidth: 1, 
// //                               pointsVisible: true, 
// //                               pointSize: 2}));
// // print(ui.Chart.feature.byFeature(ppt, 'date','meanPpt')
// //                       .setChartType('ColumnChart')
// //                       .setOptions({
// //                         title: 'Ppt of Mesic Area',
// //                         hAxis: {title: 'Date'},
// //                         vAxis: {title: 'Area (%)'},
// //                         lineWidth: 0, 
// //                         pointsVisible: true, 
// //                         pointSize: 2}));
// // Define the chart and print it to the console.
// var chart =
//     ui.Chart.feature
//         .byFeature({
//           features: merged,
//           xProperty: 'system:time_start',
//           yProperties: ['meanPpt', 'areaVSDI']
//         })
//         .setSeriesNames(['Precipitation', 'Mesic Area'])
//         .setChartType('ColumnChart')
//         .setOptions({
//           // title: 'Mesic area (%) and Precipitation (mm) )',
//           series: {
//             0: {targetAxisIndex: 1, type: 'bar', color: '1d6b99'},
//             1: {
//               targetAxisIndex: 0,
//               type: 'line',
//               lineWidth: 0,
//               pointSize: 2,
//               color: 'e37d05'
//             }
//           },
//           hAxis:
//               {title: 'Date', titleTextStyle: {italic: false, bold: true}},
//           vAxes: {
//             0: {
//               title: 'Mesic Area (%)',
//               baseline: 0,
//               titleTextStyle: {italic: false, bold: true, color: 'e37d05'}
//             },
//             1: {
//               title: 'Precipitation (mm)',
//               titleTextStyle: {italic: false, bold: true, color: '1d6b99'}
//             },
//           },
//           bar: {groupWidth: '40%'},
//         });
// print(chart);
// //Add color bar
// //base code adapted from: 
// //https://gis.stackexchange.com/questions/290713/adding-map-key-to-map-or-console-in-google-earth-engine
// //https://code.earthengine.google.com/9f890c110e98fa3391480543009c8028

var viridis = ['#481567FF','#482677FF','#453781FF','#404788FF','#39568CFF',
                                              '#33638DFF','#2D708EFF','#287D8EFF','#238A8DFF','#1F968BFF',
                                              '#20A387FF','#29AF7FFF','#3CBB75FF','#55C667FF',
                                              '#73D055FF','#95D840FF','#B8DE29FF','#DCE319FF','#FDE725FF' 
];

function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '300x15',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 22px'},
  });
}
function makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {
  var  labelheader = ui.Label('Mesic Persistence (%)',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});
  var labelLines = ui.Panel(
      [
        ui.Label(lowLine, {margin: '-4px 21px'}),
        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highLine, {margin: '-4px 21px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
      var labelPanel = ui.Panel(
      [
        ui.Label(lowText, {margin: '0px 14.5px'}),
        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highText, {margin: '0px 1px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
    return ui.Panel({
      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], 
      style: {position:'bottom-left'}});
}
Map.add(makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue']));


Map.addLayer(mesics_frequency_masked, {min:min_occurence,max:100,
palette:['orange','yellow','lightblue','darkblue']},'% Mesic NDVI');


Map.addLayer(mesics_frequency_masked_vsdi,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'% Moist VSDI MCARI');

// Export.image.toDrive({
//   image: mesics_frequency_masked_vsdi,
//   // description: mesics_frequency_masked_vsdi,
//   folder:'MapsPub',
//   scale: 10,
//   maxPixels: 1e13,
//   region: geometry
//   })


// // Display the county boundaries.
// var boundary = ee.Image().byte().paint({
//   featureCollection: EllisMay,
//   color: 1,
//   width: 2
// });
// Map.addLayer(boundary, {palette: ['000000','d23513']}, 'baughCreek');

// Map.addLayer(baughCreek,{}, 'baughCreek')

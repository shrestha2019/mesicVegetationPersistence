/*******************************************************************************
 * Model *
 *  
 ******************************************************************************/

// Define a JSON object for storing model info (app data). 
var m = {};


/*******************************************************************************
* Components *
******************************************************************************/

// Define a JSON object for storing UI components.
var c = {};

// Define a control panel for user input.
c.controlPanel = ui.Panel();

// Define the main interactive map.
c.map = ui.Map();

////Logo

// var logo = ee.Image('users/ns_boise/BoiseStateLogo2wgs')
// .visualize({
//     bands:  ['b1', 'b2', 'b3'],
//     min: 0,
//     max: 255
//     });
// var thumb = ui.Thumbnail({
//     image: logo,
//     params: {
//         dimensions: '1000x500',
//         format: 'jpeg'
//         },
//     style: {height: '150px', width: '350px',padding :'5'}
//     });
    
// var toolPanel = ui.Panel(thumb, 'flow', {width: '400px'});


var emptyRast = ee.Image().byte(); // <-- create empty raster for painting

var studyArea = ee.FeatureCollection('users/ns_boise/US_Sagebrush_Biome_2019')
var paintStudyarea = emptyRast.paint(studyArea, '000000', 1);
c.map.addLayer(paintStudyarea, {palette: '000000'},'Sagebrush Biome Area')
// c.map.centerObject(studyArea,5)

// Define an app info widget group.
c.info = {};
c.info.titleLabel = ui.Label('Mesic Vegetation Persistence (MVP) Mesic Resources Restoration Monitoring Aid (MRRMaid): Monitoring the persistence of mesic vegetation in the Intermountain West sagebrush biome (Beta Version 1.0)', 
                              {fontWeight: 'bold', fontSize: '18px', margin: '0 0 4px 0', padding:'0'});
c.info.aboutLabel = ui.Label(
  ' The application provides near-real time spatial and temporal dynamics of mesic vegetation using time-series Sentinel-2 and Landsat-[5,7,8] images.' +
  ' It uses combination of moisture and vegetation-based indices to threshold and differentiate mesic vegetation. ' +
  ' The Mesic Persistence map represents spatio-temporal dynamics while scatter plot provides' +
  ' variation of mesic vegetaion on user drawn area of interest.'
  // ' The dropdown menu [activates after running application] at the center of map ' + 
  // ' provides list of avialable NAIP images.'
  );
c.info.url =   ui.Label('Mesic Vegetation Persistence details').setUrl('https://www.sciencedirect.com/science/article/pii/S0048969724006284?dgcid=author') 


c.info.zoom = ui.Label(' * Zoom in and pan to a site of interest.')
c.info.drw = ui.Label(' * Draw a polygon/rectangle to update the region of interest.') 
c.info.slct = ui.Label(' * Select either the Sentinel or the Landsat Sensor.')
c.info.sldr = ui.Label(' * Use the sliders to select the desired date.')
c.info.threshold = ui.Label(' * Change thresholds if necessary. Use time series viewer to determine threshold')
c.info.sbmt = ui.Label(' * Click the "Submit" button and the map and time series plots will reflect the resources estimated in the drawn area.')
c.info.naip = ui.Label(' * Select National Agricultural Imagery Program (NAIP) images for comparison. Loads after computing MVP.');
c.info.dwnld = ui.Label(' * Download the mapped dataset for offline analysis.')

c.info.dsclmr = ui.Label(' *** Disclaimer - These datasets have high levels of accuracy, but as with any satellite-derived dataset, there are errors. High resolution base images and NAIP images (both with longer revisit periods than the imagery used for the modeled datasets) will show more detail than will be avaiable in our outputs due to differences in spatial resolution.')




 
c.info.guide =   ui.Label('User guide').setUrl(
  'https://docs.google.com/document/d/1NCEuSc3YPvZRVwOPSUGDsGNAGVfmhHz84Yi3Xl9GMwg/edit?usp=sharing') 
c.info.vid =   ui.Label('Video tutorial').setUrl(
  'https://drive.google.com/file/d/19t8DheO3Vw1kWQR-ShYyV5FXIbQSDAdP/view?usp=share_link') 
c.info.otherApp =   ui.Label('See our other mesic vegetation mapping App').setUrl(
  'https://nekolarik.users.earthengine.app/view/monthly-mrrmaid') 

c.info.contact =   ui.Label('For more infromation, contact the author: nawarajshrestha@boisestate.edu, nawa.shrestha@gmail.com', {fontWeight: 'bold'})

  
c.info.panel = ui.Panel([c.info.titleLabel, c.info.guide, c.info.aboutLabel, c.info.url, c.info.zoom,
                       c.info.slct,c.info.sldr,c.info.threshold, c.info.drw, c.info.sbmt,c.info.naip, c.info.dwnld, 
                        c.info.dsclmr, c.info.vid, c.info.otherApp,  c.info.contact,
                          
                          ]);
// Define drawing tools 
var symbol = {
  polygon: 'ðŸ”º',
  rectangle: 'â¬›',

};

c.buttons = ui.Panel({
  widgets: [
    ui.Button({
      label: symbol.polygon + ' Polygon',
      onClick: drawPolygon,
      style: {stretch: 'horizontal'}
    }),
    
    ui.Button({
      label: symbol.rectangle + ' Rectangle',
      onClick: drawRectangle,
      style: {stretch: 'horizontal'}
    }),
  ],
  style: {position: 'bottom-left'},
  layout: null,
});


// SET UP SECONDARY PANELS
// Sensor dropdown
var sensorLabel = ui.Label('Select Sensor',{fontWeight: 'bold'});
var sensorList = ['Sentinel-2','Landsat'];
var sensorSelect = ui.Select({items:sensorList, value:'Sentinel-2', style:{stretch: 'horizontal'}});
c.sensorPanel = ui.Panel([sensorLabel,sensorSelect], null, {stretch: 'horizontal'});


// years panel
var d = new Date();
var y = d.getFullYear();

var yearSectionLabel = ui.Label('Define Year Range ',{fontWeight: 'bold'});
var aboutSensorLabel = ui.Label('Sentinel-2 Year Range: (2017-Current)',
                            {fontWeight: 'bold',fontFamily: 'serif', textDecoration: 'underline'});
// Select Year Range between 2017-Current for Sentinel-2'
var aboutLSensorLabel = ui.Label('Landsat Year Range: (1984-Current)',
                            {fontWeight: 'bold',fontFamily: 'serif', textDecoration: 'underline'});
// Select Year Range between 2017-Current for Sentinel-2'
var startYearLabel = ui.Label('Start Year');
var startYearslider = ui.Slider({min:1984, max:y, value:2017, step:1});
startYearslider.style().set('stretch', 'horizontal');

var endYearLabel = ui.Label('End Year');
var endYearslider = ui.Slider({min:1984, max:y, value:y-1, step:1});
endYearslider.style().set('stretch', 'horizontal');

c.yearsPanel = ui.Panel([
    yearSectionLabel,aboutSensorLabel,aboutLSensorLabel,
    ui.Panel([startYearLabel, startYearslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'}), //
    ui.Panel([endYearLabel  , endYearslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'})
  ]);

// date panel
var dateSectionLabel = ui.Label('Define Date Range (month-day)',{fontWeight: 'bold'});

var startDayLabel = ui.Label('Start Date:');
var startDayBox = ui.Textbox({value:'05-01'});
startDayBox.style().set('stretch', 'horizontal');

var endDayLabel = ui.Label('End Date:');
var endDayBox = ui.Textbox({value:'10-31'});
endDayBox.style().set('stretch', 'horizontal');

c.datesPanel = ui.Panel([dateSectionLabel,
    ui.Panel(
      [startDayLabel, startDayBox, endDayLabel, endDayBox],
      ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'}
    )]);

// //Index threshold panel

var thresholdLabel = ui.Label('Define Threshold using TS viewer',{fontWeight: 'bold'});
var MCARILabel = ui.Label('MCARI');
var MCARIFull = ui.Label('Modified Chlorophyll Absorption Ratio Index:');
var MCARIslider = ui.Slider({min:0, max:1, value:0.2, step:0.01});
MCARIslider.style().set('stretch', 'horizontal');


var mesicVSDILabel = ui.Label('MCI');
var MCIFull = ui.Label('Moisture Change Index:');
var VSDIslider = ui.Slider({min:0, max:1, value:0.4, step:0.1});
VSDIslider.style().set('stretch', 'horizontal');

c.thresholdPanel = ui.Panel(
  [
    thresholdLabel,MCARIFull,
    ui.Panel([MCARILabel, MCARIslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'}), //
    MCIFull,
    ui.Panel([mesicVSDILabel  , VSDIslider], ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'})
  ] 
);

// timeSeries dropdown
var timeSeriesLabel = ui.Label('Use time series viewer to find the appropriate threshold values',{fontWeight: 'bold'});

// var sensorSelect = ui.Select({items:sensorList, value:'Sentinel-2', style:{stretch: 'horizontal'}});
// var timeSeriesLabel = ui.Panel([timeSeriesLabel,timeSeriesLabel], null, {stretch: 'horizontal'});

var tsViewerLink =   ui.Label('Time Series Viewer', {fontWeight: 'bold'}).setUrl('https://ns-boise.users.earthengine.app/view/timeseriesplot') 

c.tsViewerPanel = ui.Panel([timeSeriesLabel, tsViewerLink], null, {stretch: 'horizontal'});

// Define an example location selector widget group.
c.info.titleFeature = ui.Label('Draw Area of Interest',{fontWeight: 'bold'});
c.info.titleFeature.style().set('stretch', 'horizontal');
c.featurePanel = ui.Panel([c.info.titleFeature]);


// submit panel
var submitButton = ui.Button({label: '7. Submit'});
c.submitButton = ui.Panel([submitButton], null, {stretch: 'horizontal'});
// c.chartPanel = ui.Panel({style: {position: 'bottom-right'}})

// chart panel

var chartPanel = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'bottom-right', shown: false}
});



//Color Pallette
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '200x15',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 22px'},
  });
}

function makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {
  var  labelheader = ui.Label('Mesic Vegetation Persistence (%)',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});
  var labelLines = ui.Panel(
      [
        ui.Label(lowLine, {margin: '-4px 21px'}),
        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highLine, {margin: '-4px 21px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
      var labelPanel = ui.Panel(
      [
        ui.Label(lowText, {margin: '0px 14.5px'}),
        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highText, {margin: '0px 1px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
    return ui.Panel({
      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], 
      style: {position:'bottom-left'}});
}


/*******************************************************************************
* Composition *
******************************************************************************/
// c.controlPanel.add(toolPanel);
c.controlPanel.add(c.info.panel);

c.controlPanel.add(c.sensorPanel);
c.controlPanel.add(c.yearsPanel);
c.controlPanel.add(c.datesPanel);
c.controlPanel.add(c.thresholdPanel);
c.controlPanel.add(c.tsViewerPanel);

c.controlPanel.add(c.featurePanel);
c.controlPanel.add(c.buttons);
c.controlPanel.add(c.submitButton);
// c.controlPanel.add(chartPanel);
c.controlPanel.add(makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue']));

// c.map.clear()
ui.root.clear();

ui.root.add(c.controlPanel);
c.map.add(chartPanel);
ui.root.add(c.map);
// c.map.add(ui.Panel([c.info.panel, c.sensorPanel, c.yearsPanel,c.datesPanel,  c.featurePanel, c.buttons, c.submitButton,
//                     makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue'])],
//           ui.Panel.Layout.flow('vertical'), 
//           {width: '370px', position: 'bottom-left'}
//           ));
// c.map.add(c.chartPanel);

// // /*******************************************************************************
// * Styling *
// * 
// // ******************************************************************************/
c.controlPanel.style().set({
  width: '400px',
  padding: '0px'
});

c.map.setOptions('HYBRID');

/*******************************************************************************
* Behaviors *
******************************************************************************/

var drawingTools = c.map.drawingTools();

drawingTools.setShown(false);

while (drawingTools.layers().length() > 0) {
  var features = drawingTools.layers().get(0);
  drawingTools.layers().ee.FeatureCollection(features);
   print(featColl)
}

while (drawingTools.layers().length() > 0) {
  var layer = drawingTools.layers().get(0);
  drawingTools.layers().remove(layer);
}

var symbol = {color: 'black', fillColor: '#FFFFFF77'}

var dummyGeometry =
    ui.Map.GeometryLayer({geometries: null});
drawingTools.layers().add(dummyGeometry);

function clearGeometry() {
  var layers = drawingTools.layers();
  layers.get(0).geometries().remove(layers.get(0).geometries().get(0));
}

function drawRectangle() {
  clearGeometry();
  drawingTools.setShape('rectangle');
  drawingTools.draw();
}

function drawPolygon() {
  drawingTools.setShape('polygon');
  drawingTools.draw();
  clearGeometry();
}

/* 
function to calculate mesic frequency  
*/
function calcFrequency(collection){
  var min_occurence = 5;
  var mesics_sum_vsdi = collection.select('mesics_MVsdi').reduce(ee.Reducer.sum());
  var mesics_frequency_vsdi = mesics_sum_vsdi.divide(collection.select('mesics_MVsdi').size()).multiply(100);
  var mesics_frequency_masked_vsdi = mesics_frequency_vsdi
                                    .updateMask(mesics_frequency_vsdi.gt(min_occurence))
                                    .round()
                                    .rename('mesics_frequency_masked_vsdi');
  return ee.Image(mesics_frequency_masked_vsdi)
}

//// Function to calculate mmean ppt////
function meanPpt(img, aoi){
  var mPpt = img.reduceRegion(ee.Reducer.mean(), 
              aoi,4000,null,null,false,1e13)
              .get('ppt')
  var date = ee.Date(img.get('system:time_start'));
    return img.set({'meanPpt': mPpt, 'date': date});
    
}

// //// Function to calculate mmean ppt////
// function meanSpei(img, aoi){
//   var mSpei = img.reduceRegion(ee.Reducer.mean(), 
//               aoi,4000,null,null,false,1e13)
//               .get('spei14d')
//   var date = ee.Date(img.get('system:time_start'));
//     return img.set({'meanSpei': mSpei, 'date': date});
    
// }
/* 
call scripts to process images
*/

// var process_images = require('users/ns_boise/AppPublish:processMesicDate.js'); 
// var process_LSimages = require('users/ns_boise/AppPublish:processMesicLandsat.js'); 
// var process_util = require('users/ns_boise/AppPublish:Utilities.js'); 

var process_images = require('users/nawa_shrestha/MesicVegetation:processMesicDate.js'); 
var process_LSimages = require('users/nawa_shrestha/MesicVegetation:processMesicLandsat.js'); 
var process_util = require('users/nawa_shrestha/MesicVegetation:Utilities.js'); 

/* 
function to process and chart timeseries  
*/

function chartTimeSeries() {
  // Make the chart panel visible the first time a geometry is drawn.

  
  if (!chartPanel.style().get('shown')) {
    chartPanel.style().set('shown', true);
  }
  drawingTools.setShape(null);
  
  var point = drawingTools.layers().get(0).geometries().get('0');
  var vecDisplay = ee.Image(0).updateMask(0).paint(point, '000000', 2);
  // Get the drawn geometry; it will define the reduction region.
  var aoi = drawingTools.layers().get(0).getEeObject();
  var geom = drawingTools.layers().get(0).toGeometry();
  // c.map.centerObject(point, 11);
  
  var startYear = startYearslider.getValue();
  var endYear = endYearslider.getValue();
  var startMonth = startDayBox.getValue();
  var endMonth = endDayBox.getValue();
  var sensor = sensorSelect.getValue();
  var mcari = parseFloat(MCARIslider.getValue())
  var mci = parseFloat(VSDIslider.getValue())
  //// Landform to calculate valley bottom////
  var landforms = ee.Image('CSP/ERGo/1_0/US/landforms').select('constant').clip(geom);
  var lfmask = landforms.eq(24).or(landforms.eq(34))
            .or(landforms.eq(41)).or(landforms.eq(42));
  var lfmaskSelf=lfmask.selfMask()
  var valleyBottom = landforms.updateMask(lfmask).reduceToVectors({maxPixels: 1e13, scale: 30, geometryType: 'polygon',});
  
  var datasetPpt = ee.ImageCollection("OREGONSTATE/PRISM/AN81d")
                  .filterDate(startYear+'-'+startMonth, endYear+'-'+endMonth)
                  .select('ppt')
                  .map(function(img){
                    var meanPpt = img.reduceRegion(ee.Reducer.mean(), geom,4000,null,null,false,1e13)
                    .get('ppt')
                    var date = ee.Date(img.get('system:time_start'));
                    return img.set({'meanPpt': meanPpt, 'date': date});
                  })
  // var datasetSpei = ee.ImageCollection("GRIDMET/DROUGHT")
  //                 .filterDate(startYear+'-'+startMonth, endYear+'-'+endMonth)
  //                 .select('spei14d');
  
  if(sensor == 'Sentinel-2'){
    var processed = process_images.processS2(startYear, endYear, startMonth, endMonth, point, mcari, mci);
    var frequency = calcFrequency(processed)
    // var frequencyMasked = frequency.updateMask(lfmaskSelf);
    // var frequencyMasked = frequency.multiply(frequency);
    print(frequency, 'frequency')
    // var mesic_areas = processed.map(mesicAreas)
    // var meanppt = datasetPpt.map(meanPpt);
    // var meanSpei = datasetSpei.map(function (img, aoi){
    //   var mSpei = img.reduceRegion(ee.Reducer.mean(), 
    //   aoi,4000,null,null,false,1e13)
    //   .get('spei14d')
    //   var date = ee.Date(img.get('system:time_start'));
    //   return img.set({'meanSpei': mSpei, 'date': date});})
    // print(meanSpei)
    var mesic_areas = processed.map(function(i, aoi) {
      var mesic = ee.Image(1).mask(i.select('mesics_MVsdi'));
      var mesicsArea =mesic.multiply(ee.Image.pixelArea())
                    .reduceRegion(ee.Reducer.sum(), valleyBottom,10,null,null,false,1e13)
                    .get('constant');
      var geomArea = ee.Image(1).multiply(ee.Image.pixelArea()) 
                      .reduceRegion(ee.Reducer.sum(), valleyBottom,10,null,null,false,1e13)
                      .get('constant');
      var areaVSDI = ee.Number(mesicsArea).divide(ee.Number(geomArea));
      
      return i.set({'areaVSDI': areaVSDI.multiply(100)
      
    })});
    
    var merged = datasetPpt.merge(mesic_areas);
    
    var chartArea = ui.Chart.feature.byFeature({features: merged, xProperty: 'system:time_start', yProperties: ['meanPpt', 'areaVSDI']})
            .setSeriesNames(['Precipitation (mm)', 'Mesic Area'])
            .setChartType('ColumnChart')
            .setOptions({
              title: 'Mesic area (%) and Precipitation in Area of Interest (Sentinel-2)',
              series: {
                0: {targetAxisIndex: 1, type: 'bar', color: '1d6b99'},
                1: {targetAxisIndex: 0, type: 'line', lineWidth: 0, pointSize: 2, color: 'e37d05'}},
              hAxis:
                  {title: 'Date', titleTextStyle: {italic: false, bold: true}},
              vAxes: {
                0: {title: 'Mesic Area (%)', baseline: 0,
                  titleTextStyle: {italic: false, bold: true, color: 'e37d05'}
                },
                1: {
                  title: 'Precipitation (mm)',
                  titleTextStyle: {italic: false, bold: true, color: '1d6b99'}},
              },
              bar: {groupWidth: '40%'},
            });
    
  } if(sensor == 'Landsat') {
    var processedLS = process_LSimages.processL578(startYear, endYear, startMonth, endMonth,point);
    var frequency = calcFrequency(processedLS);
    // var frequencyMasked = frequency.updateMask(lfmaskSelf);
    
    var mesic_areasLS = processedLS.map(function(i, aoi) {
      var mesic = ee.Image(1).mask(i.select('mesics_MVsdi'));
      var mesicsArea =mesic.multiply(ee.Image.pixelArea())
                    .reduceRegion(ee.Reducer.sum(), valleyBottom,10,null,null,false,1e13)
                    .get('constant');
      var geomArea = ee.Image(1).multiply(ee.Image.pixelArea()) 
                    .reduceRegion(ee.Reducer.sum(), valleyBottom,10,null,null,false,1e13)
                    .get('constant');
      var areaVSDI = ee.Number(mesicsArea).divide(ee.Number(geomArea));
      var date = ee.Date(i.get('system:time_start'));
      return i.set({'areaVSDI': areaVSDI.multiply(100), 'date': date})
      
    });
   
    var chartArea = ui.Chart.feature.byFeature(mesic_areasLS, 'date', 'areaVSDI')
              // .setOptions(titleMsf);
              .setOptions({
                title: 'Percent Mesic Area Landsat (User Drawn)',
                hAxis: {title: 'Date'},
                vAxis: {title: 'Area %'},
                lineWidth: 0,
                pointsVisible: true,
                pointSize: 2,
                trendlines: { 0: {color: '07a521', labelInLegend: 'trend line', 
                                        visibleInLegend: true},  dataOpacity: 0.5}
              })
  }

  c.map.layers().reset();
  c.map.layers().set(0, ui.Map.Layer(frequency, 
                  {min:5,max:100,palette:['orange','yellow','lightblue','darkblue']},
                  'Mesic Vegetation Persistence'));
  c.map.layers().set(1, ui.Map.Layer(vecDisplay, {palette: '000000'},'AOI'));
  
  // Replace the existing chart in the chart panel with the new chart.
  chartPanel.widgets().set(0, chartArea)
    
// Define a function to generate a download URL of the image for the
  // viewport region. 
  var scales=frequency.projection().nominalScale()
  function downloadImg() {
    var viewBounds = drawingTools.layers().get(0).toGeometry()
    var downloadArgs = {
      name: 'ee_image',
      crs: 'EPSG:5070',
      scale: scales,
      region: viewBounds//.toGeoJSONString()
   };
   var url = frequency.getDownloadURL(downloadArgs);
   urlLabel.setUrl(url);
   urlLabel.style().set({shown: true});
  }
  
  // Add UI elements to the Map.
  var downloadButton = ui.Button('Download', downloadImg);
  var urlLabel = ui.Label('Download mapped data', {shown: false});
  var panel = ui.Panel([downloadButton, urlLabel]);
  c.map.add(panel);
  
  
  
  drawingTools.setShape(null);
  dummyGeometry.setShown(false)
}

// var selectorlabel = ui.Label('Select NAIP')
// var selector = ui.Select()
// var selectorpanel = ui.Panel({items: dates, 
  
// })
/* 
function to draw NAIP images
*/

var naipImages = function(){
  var aoi = drawingTools.layers().get(0).getEeObject();
  var naip_im = process_util.findNAIP(aoi);
  
  function renderDateRange(date) {
    var image = naip_im.filterDate(ee.Date(date), ee.Date(date).advance(1, 'day'))
    var trueColorVis = {
      min: 0.0,
      max: 255.0,
      bands: ['R', 'G', 'B']};

    var layer = ui.Map.Layer(image, trueColorVis, 'NAIP')
    
    c.map.layers().set(2, layer);
    
    
  }
  
  var allDates = ee.List(naip_im.aggregate_array('system:time_start'));
  var allDatesFormatted = allDates.map(function(date){
        return ee.Date(date).format('YYYY-MM-dd')}).distinct();
    
  allDatesFormatted.evaluate(renderSlider) 
  function renderSlider(dates) {
    var selector = ui.Select({
      items: dates, 
      placeholder: 'Select NAIP Image',
      // value: dates[0], 
      onChange: renderDateRange,
      });
      var selectorpanel = ui.Panel([selector])
  // ui.Panel.Layout.Flow('horizontal'), {stretch: 'horizontal'})
  // selectorpanel.style().set({position: 'top-right'});
      // selectorpanel.clear()
      c.map.remove(selectorpanel)
      c.map.add(selectorpanel);
  
  
  }
  


}
submitButton.onClick(ui.util.debounce(naipImages, 500));
submitButton.onClick(ui.util.debounce(chartTimeSeries, 500));
// selectorpanel.onChange(naipImages)


